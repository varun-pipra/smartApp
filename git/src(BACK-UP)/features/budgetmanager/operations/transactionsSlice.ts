import { RootState } from "app/store";
import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { getTransactionsData, addTransaction, updateTransactionRecord, deleteTransactionsData } from './transactionsApi';

export interface BudgetManagerTransactionsState {
	loading: boolean;
	transactionsData: any;
	lineItemId: string;
	showDirectCostForm: boolean;
	uploadedFilesFromLocal: Array<object>;
	uploadedFilesFromDrive: Array<object>;
	filteredRecords: any;
}

const initialState: BudgetManagerTransactionsState = {
	loading: false,
	lineItemId: '',
	transactionsData: [],
	showDirectCostForm: false,
	uploadedFilesFromLocal: [],
	uploadedFilesFromDrive: [],
	filteredRecords: []
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchTransactionsData: any = createAsyncThunk<any, any, any>(
	'transactionsData',
	async (obj) => {
		// console.log("lineItemId", obj);
		const response = await getTransactionsData(obj.appInfo, obj.id);
		// The value we return becomes the `fulfilled` action payload
		return response;
	}
);

// export const createNewTransaction:any = createAsyncThunk(
// 	'transactionsData',
// 	async (lineItemId: string, payload: any) => {
// 		console.log("lineItemId", lineItemId, payload)
// 		const response = await addTransaction(payload,lineItemId);
// 		// The value we return becomes the `fulfilled` action payload
// 		return response;
// 	}
// );

export const updateTransactions: any = createAsyncThunk(
	'transactionsData',
	async (lineItemId: string, payload: any) => {
		// console.log("lineItemId", lineItemId, payload)
		const response = await updateTransactionRecord(payload, lineItemId);
		return response;
	}
);

export const deleteTransactions: any = createAsyncThunk(
	'transactionsData',
	async (lineItemId: string, payload: any) => {
		// console.log("lineItemId", lineItemId)
		const response = await deleteTransactionsData(payload.id, lineItemId);
		return response;
	}
);

export const transactionsSlice = createSlice({
	name: 'transactionsData',
	initialState,
	// The `reducers` field lets us define reducers and generate associated actions
	reducers: {
		setTransactionData: (state, action: PayloadAction<any>) => {
			state.transactionsData = action.payload;
		},
		setOpenDirectCostForm: (state, action: PayloadAction<boolean>) => {
			state.showDirectCostForm = action.payload;
		},
		setUploadedFilesFromLocal: (state, action: PayloadAction<any>) => {
			// console.log("Local Files", action.payload);
			state.uploadedFilesFromLocal = action.payload;
		},
		setUploadedFilesFromDrive: (state, action: PayloadAction<any>) => {
			// console.log("Drive Files", action.payload);
			state.uploadedFilesFromDrive = action.payload;
		},
		setFilteredRecords: (state, action: PayloadAction<any>) => {
			state.filteredRecords = action.payload;
		}
	},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder
			.addCase(fetchTransactionsData.pending, (state) => {
				state.loading = true;
			})
			.addCase(fetchTransactionsData.fulfilled, (state, action) => {
				state.loading = false;
				state.transactionsData = action.payload;
				state.filteredRecords = action.payload;
			})
			.addCase(fetchTransactionsData.rejected, (state) => {
				state.loading = false;
			});
	}
});

export const getTransactionData = (state: RootState) => state.transactionsData.transactionsData;
export const getFilteredRecords = (state: RootState) => state.transactionsData.filteredRecords;

export const { setTransactionData, setOpenDirectCostForm, setUploadedFilesFromLocal, setUploadedFilesFromDrive, setFilteredRecords } = transactionsSlice.actions;
export default transactionsSlice.reducer;