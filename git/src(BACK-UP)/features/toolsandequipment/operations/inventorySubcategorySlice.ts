import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "app/store";
import { fetchInventorySubCategoryList } from "./inventorySubcatagoryAPI";

export type ToolsAndEquipmentPageTypes = "Subcategory" | "inventory";

export interface ToolsAndEquipmentState {
  loadingSubCategory: boolean;
  inventorySubCategories: any[];
}

const initialState: ToolsAndEquipmentState = {
  loadingSubCategory: false,
  inventorySubCategories: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchSubCategories = createAsyncThunk(
  "inventory/Subcategory",
  async () => {
    const inventorySubCategories = await fetchInventorySubCategoryList();
    // The value we return becomes the `fulfilled` action payload
    return inventorySubCategories;
  }
);

export const inventorySubCategorySlice = createSlice({
  name: "inventorySubcategory",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    //
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchSubCategories.pending, (state) => {
        state.loadingSubCategory = true;
      })
      .addCase(fetchSubCategories.fulfilled, (state, action) => {
        state.loadingSubCategory = false;
        state.inventorySubCategories = action.payload;
      })
      .addCase(fetchSubCategories.rejected, (state, action) => {
        state.loadingSubCategory = false;
      });
  },
});

// export const { getAll } =subCategorySlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const getPageType = (state: RootState) => state.inventorySubCategory;


export default inventorySubCategorySlice.reducer;
