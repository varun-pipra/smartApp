import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "app/store";
import { fetchInventoryModelnumberList } from "./inventoryModelnumberAPI";

export type ToolsAndEquipmentPageTypes = "modelnumber" | "inventory";

export interface ToolsAndEquipmentState {
  loadingModelnumber: boolean;
  inventoryModelnumbers: any [];
}

const initialState: ToolsAndEquipmentState = {
  loadingModelnumber: false,
  inventoryModelnumbers: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchModelnumbers = createAsyncThunk(
  "inventory/modelnumber",
  async () => {
    const inventoryModelnumbers = await fetchInventoryModelnumberList();

    // The value we return becomes the `fulfilled` action payload
    return inventoryModelnumbers;
  }
);

export const inventoryModelnumberSlice = createSlice({
  name: "inventorymodelnumber",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    //
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchModelnumbers.pending, (state) => {
        state.loadingModelnumber = true;
      })
      .addCase(fetchModelnumbers.fulfilled, (state, action) => {
        state.loadingModelnumber = false;
        state.inventoryModelnumbers = action.payload;
      })
      .addCase(fetchModelnumbers.rejected, (state, action) => {
        state.loadingModelnumber = false;
      });
  },
});

// export const { getAll } = subcategorySlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const getPageType = (state: RootState) => state.inventoryCategory;



export default inventoryModelnumberSlice.reducer;
