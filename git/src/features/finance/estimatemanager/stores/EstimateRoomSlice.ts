import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';
import {fetchGridDataList} from './EstimateRoomAPI';

export interface EstimateRoomDataState {
	loading: boolean;
	originalGridApiData: any;
	gridData: any;
};

const initialState: EstimateRoomDataState = {
	loading: false,
	originalGridApiData: [],
	gridData: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchGridData = createAsyncThunk<any, any>(
	'gridData',
	async (appInfo) => {
		const response = await fetchGridDataList();
		// This adding rowId is to handle the item navigation and showing Toast.
		const modifiedRespone = response.map((row: any, index: number) => {
			return {...row, rowId: index + 1};
		});
		// The value we return becomes the `fulfilled` action payload
		return modifiedRespone;
	}
);


export const estimateRoomSlice = createSlice({
	name: 'gridData',
	initialState,
	// The `reducers` field lets us define reducers and generate associated actions
	reducers: {},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder
			.addCase(fetchGridData.pending, (state) => {
				state.loading = true;
			})
			.addCase(fetchGridData.fulfilled, (state, action) => {
				console.log(action.payload, 'action.payload')
				state.loading = false;
				state.gridData = action.payload;
				state.originalGridApiData = action.payload;
			})
			.addCase(fetchGridData.rejected, (state) => {
				state.loading = false;
			})
			
	}
});

export const {

} = estimateRoomSlice.actions;

export default estimateRoomSlice.reducer;