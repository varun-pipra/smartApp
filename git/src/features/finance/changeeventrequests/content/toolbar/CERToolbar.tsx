import { getServer } from 'app/common/appInfoSlice';
import { useAppDispatch, useAppSelector } from 'app/hooks';
// Project files and internal support import
import IQTooltip from 'components/iqtooltip/IQTooltip';
import { memo, useEffect, useState } from 'react';
import SUIAlert from 'sui-components/Alert/Alert';

import { GridOn, Refresh, TableRows } from '@mui/icons-material';
import AssessmentOutlinedIcon from '@mui/icons-material/AssessmentOutlined';
import { Button, IconButton, ToggleButton, ToggleButtonGroup } from '@mui/material';

import { deleteChangeEventRequest } from '../../stores/ChangeEventAPI';
import {
	getChangeEventList, setChangeEventsListRefreshed, setCurrentChangeEventId, setToast
} from '../../stores/ChangeEventSlice';
import {ReportAndAnalyticsToggle} from 'sui-components/ReportAndAnalytics/ReportAndAnalyticsToggle';
import { postMessage } from 'app/utils';
import SapButton from 'sui-components/SAPButton/SAPButton';

// Component definition
export const CERLeftButtons = memo(() => {
	const dispatch = useAppDispatch();
	const appInfo = useAppSelector(getServer);

	const [disableDelete, setDisableDelete] = useState<boolean>(true);

	const [alert, setAlert] = useState<boolean>(false);
	const { selectedChangeEvents, selectedChangeEventsCount } = useAppSelector((state) => state.changeEventRequest);

	const deleteChangeEvent = () => {
		// const userType = isUserGCForVPA(appInfo);
		// const otherStatus = ['AutoGeneratedWaitingForBothParties', 'Rejected', 'AwaitingAcceptance', 'SubmittedWaitingForOtherParty', 'PaymentAuthorized'].includes(selectedRows[0]?.status);
		// const sentReceivedStatus = ['PaymentSent', 'PaymentReceived'].includes(selectedRows[0]?.status);

		// if (userType == true && sentReceivedStatus == true) {///Vendor Pay Manager
		// 	setAlert(true);
		// 	setWarningMessage(true);
		// }
		// else if (userType == false && (sentReceivedStatus == true || otherStatus == true)) {///Sub Contract Pay Manager
		// 	setAlert(true);
		// 	setWarningMessage(true);
		// }
		// else {
		// 	setAlert(true);
		// 	setWarningMessage(false);
		// }
		console.log("selectedChangeEvents", selectedChangeEvents)
		deleteChangeEventRequest(selectedChangeEvents?.[0]?.id, (response:any) => {
			if(response) {
				dispatch(getChangeEventList());
				setToast('Deleted Change Event Request Successfully.');
			}
		});
	};
	const PrintOnclick = (event: any) => {
		postMessage({
			event: 'openitemlevelreport',
			body: {
				targetLocation: {
					x: event.pageX,
					y: event.pageY
				}
			}
		});
	};

	return <>
		<IQTooltip title='Refresh' placement='bottom'>
			<IconButton
				aria-label='Refresh Change Event Request List'
				onClick={() => { 
					dispatch(getChangeEventList()); 
					dispatch(setChangeEventsListRefreshed(true))
				}}
			>
				<span className='common-icon-refresh'></span>
			</IconButton>
		</IQTooltip>
		{/* <IQTooltip title='Export CSV' placement='bottom'>
			<IconButton>
				<span className='common-icon-Export'/>
			</IconButton>
		</IQTooltip> */}
		<IQTooltip title='Print' placement='bottom'>
			<IconButton disabled={selectedChangeEventsCount === 0}
			 onClick={(e: any) => { PrintOnclick(e) }}>
				<span className='common-icon-print' />
			</IconButton>
		</IQTooltip>
		<IQTooltip title='Delete' placement='bottom'>
			<IconButton aria-label='Delete Bid response Line Item'
				disabled={selectedChangeEventsCount === 0}
				onClick={() => deleteChangeEvent()}
			>
				<span className='common-icon-delete'></span>
			</IconButton>
		</IQTooltip>
	</>;
});

// Component definition
export const CERRightButtons = memo(() => {
	const dispatch = useAppDispatch();
	const { connectors } = useAppSelector((state) => state.gridData);

	const handleView = (event: React.MouseEvent<HTMLElement>, value: string) => {
		if (value !== null) {
			// dispatch(setShowTableViewType(value));
		}
	};

	return <>
		<div key='spacer' className='toolbar-item-wrapper toolbar-group-button-wrapper' >
			{<ReportAndAnalyticsToggle/>}
			{connectors?.length ? <SapButton imgSrc={connectors?.[0]?.primaryIconUrl}/> : <></>}
			{/* <ToggleButtonGroup
				exclusive
				value={'List'}
				size='small'
				onChange={handleView}
				aria-label='Inventory tab view buttons'
			>
				<ToggleButton value={'List'} aria-label='Change Events List Tab'>
					<GridOn />
				</ToggleButton>
				<ToggleButton value={'Chart'} aria-label='Change Events Analytics Tab'>
					<AssessmentOutlinedIcon />
				</ToggleButton>
			</ToggleButtonGroup> */}
			<IQTooltip title='Settings' placement={'bottom'}>
				<IconButton
					className='settings-button'
					aria-label='Change Events Settings'
				>
					<TableRows />
				</IconButton>
			</IQTooltip>
		</div>
	</>;
});