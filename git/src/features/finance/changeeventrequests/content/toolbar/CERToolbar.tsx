import { getServer, getShowSettingsPanel, setShowSettingsPanel } from 'app/common/appInfoSlice';
import { useAppDispatch, useAppSelector } from 'app/hooks';
// Project files and internal support import
import IQTooltip from 'components/iqtooltip/IQTooltip';
import { memo, useEffect, useState } from 'react';
import SUIAlert from 'sui-components/Alert/Alert';
import _ from "lodash";
import { GridOn, Refresh, TableRows } from '@mui/icons-material';
import AssessmentOutlinedIcon from '@mui/icons-material/AssessmentOutlined';
import { Box, Button, IconButton, List, ListItem, ListItemIcon, ListItemText, Stack, ToggleButton, ToggleButtonGroup, Typography } from '@mui/material';

import { deleteChangeEventRequest, postChangeEventsToConnector } from '../../stores/ChangeEventAPI';
import {
	getChangeEventList, setChangeEventsListRefreshed, setCurrentChangeEventId, setToast
} from '../../stores/ChangeEventSlice';
import {ReportAndAnalyticsToggle} from 'sui-components/ReportAndAnalytics/ReportAndAnalyticsToggle';
import { postMessage } from 'app/utils';
import SapButton from 'sui-components/SAPButton/SAPButton';
import IQToggle from 'components/iqtoggle/IQToggle';
import SmartDropDown from 'components/smartDropdown';
import SUIDrawer from 'sui-components/Drawer/Drawer';
import React from 'react';
import { getConnectorType } from 'utilities/commonutills';
import { isChangeEventSC } from 'app/common/userLoginUtils';
import { fetchSettings } from 'features/budgetmanager/operations/settingsSlice';
import { addSettings } from 'features/budgetmanager/operations/settingsAPI';
import { checkGUID } from 'features/common/timelog/utils';

import {settingsHelper} from 'utilities/commonFunctions';
// Component definition
export const CERLeftButtons = memo(() => {
	const dispatch = useAppDispatch();
	const appInfo = useAppSelector(getServer);

	const [disableDelete, setDisableDelete] = useState<boolean>(true);

	const [alert, setAlert] = useState<boolean>(false);
	const { selectedChangeEvents, selectedChangeEventsCount } = useAppSelector((state) => state.changeEventRequest);

	const deleteChangeEvent = () => {
		// const userType = isUserGCForVPA(appInfo);
		// const otherStatus = ['AutoGeneratedWaitingForBothParties', 'Rejected', 'AwaitingAcceptance', 'SubmittedWaitingForOtherParty', 'PaymentAuthorized'].includes(selectedRows[0]?.status);
		// const sentReceivedStatus = ['PaymentSent', 'PaymentReceived'].includes(selectedRows[0]?.status);

		// if (userType == true && sentReceivedStatus == true) {///Vendor Pay Manager
		// 	setAlert(true);
		// 	setWarningMessage(true);
		// }
		// else if (userType == false && (sentReceivedStatus == true || otherStatus == true)) {///Sub Contract Pay Manager
		// 	setAlert(true);
		// 	setWarningMessage(true);
		// }
		// else {
		// 	setAlert(true);
		// 	setWarningMessage(false);
		// }
		selectedChangeEvents?.map((ce:any) => {
			console.log("selectedChangeEvents", selectedChangeEvents)
			deleteChangeEventRequest(ce?.id, (response:any) => {
				if(response) {
					dispatch(getChangeEventList());
					setToast('Deleted Change Event Request Successfully.');
				}
			});
		})
	};
	const PrintOnclick = (event: any) => {
		postMessage({
			event: 'openitemlevelreport',
			body: {
				targetLocation: {
					x: event.pageX,
					y: event.pageY
				}
			}
		});
	};

	return <>
		<IQTooltip title='Refresh' placement='bottom'>
			<IconButton
				aria-label='Refresh Change Event Request List'
				onClick={() => { 
					dispatch(getChangeEventList()); 
					dispatch(setChangeEventsListRefreshed(true))
				}}
			>
				<span className='common-icon-refresh'></span>
			</IconButton>
		</IQTooltip>
		{/* <IQTooltip title='Export CSV' placement='bottom'>
			<IconButton>
				<span className='common-icon-Export'/>
			</IconButton>
		</IQTooltip> */}
		<IQTooltip title='Print' placement='bottom'>
			<IconButton disabled={selectedChangeEventsCount === 0}
			 onClick={(e: any) => { PrintOnclick(e) }}>
				<span className='common-icon-print' />
			</IconButton>
		</IQTooltip>
		<IQTooltip title='Delete' placement='bottom'>
			<IconButton aria-label='Delete Bid response Line Item'
				disabled={selectedChangeEventsCount === 0}
				onClick={() => deleteChangeEvent()}
			>
				<span className='common-icon-delete'></span>
			</IconButton>
		</IQTooltip>
	</>;
});

// Component definition
export const CERRightButtons = memo(() => {
	const dispatch = useAppDispatch();
	const { defaultData, settingsData } = useAppSelector(state => state.settings);
	const appInfo = useAppSelector(getServer);					

	const showSettingsPanel = useAppSelector(getShowSettingsPanel);
	const [toggleChecked, setToggleChecked] = React.useState(false);
	const {blockchainEnabled} = useAppSelector((state: any) => state.blockchain);
	const { connectors } = useAppSelector((state) => state.gridData);
	const [workFlowDropDowOptions, setWorkFlowDropDowOptions] = React.useState<any>([]);
	const [selectedOption, setSelectedOption] = React.useState((settingsData?.changeOrderApp?.id && checkGUID(settingsData?.changeOrderApp?.id)) ? settingsData?.changeOrderApp?.name :'Built In');
	let defaultSelection = (settingsData?.changeOrderApp?.id && checkGUID(settingsData?.changeOrderApp?.id)) ? {"Apps": [settingsData?.changeOrderApp?.name]} : {"Built In": ['Built In']};
	const handleView = (event: React.MouseEvent<HTMLElement>, value: string) => {
		if (value !== null) {
			// dispatch(setShowTableViewType(value));
		}
	};

	useEffect(() => {
		setSelectedOption((settingsData?.changeOrderApp?.id && checkGUID(settingsData?.changeOrderApp?.id)) ? settingsData?.changeOrderApp?.name :'Built In');
		defaultSelection = (settingsData?.changeOrderApp?.id && checkGUID(settingsData?.changeOrderApp?.id)) ? {"Apps": [settingsData?.changeOrderApp?.name]} : {"Built In": ['Built In']};
		
	}, [settingsData])

	const handlePostTo = () => {
		const type = getConnectorType(connectors?.[0]?.name)
		postChangeEventsToConnector(type, (response:any) => {
			console.log("budget connector resp", response);
		})
	}
	useEffect(() => {
		const data = settingsHelper(defaultData);
		setWorkFlowDropDowOptions(data);
	},[defaultData]);

	const handleInputChange = (value:any) => {
		console.log("value", value)
		const Key = Object.keys(value);
		if(Key?.length && !_.isString(value)) {
			setSelectedOption(value[Key?.toString()].label);
		} else {
			setSelectedOption(value);
		}
		addSettings(appInfo, {...settingsData, changeOrderApp: {id: value[Key?.toString()]?.id}}, (response: any) => {
			dispatch(fetchSettings(appInfo));
		});
	};

	return <>
		<div key='spacer' className='toolbar-item-wrapper toolbar-group-button-wrapper' >
			{<ReportAndAnalyticsToggle/>}
			{!isChangeEventSC() && connectors?.length ? <SapButton imgSrc={connectors?.[0]?.primaryIconUrl} onClick={() => handlePostTo()}/> : <></>}
			{/* <ToggleButtonGroup
				exclusive
				value={'List'}
				size='small'
				onChange={handleView}
				aria-label='Inventory tab view buttons'
			>
				<ToggleButton value={'List'} aria-label='Change Events List Tab'>
					<GridOn />
				</ToggleButton>
				<ToggleButton value={'Chart'} aria-label='Change Events Analytics Tab'>
					<AssessmentOutlinedIcon />
				</ToggleButton>
			</ToggleButtonGroup> */}
			<IQTooltip title='Settings' placement={'bottom'}>
				<IconButton
					className='settings-button'
					aria-label='Change Events Settings'
					onClick={() => dispatch(setShowSettingsPanel(true))}					
				>
					<TableRows />
				</IconButton>
			</IQTooltip>
		</div>
		{showSettingsPanel ?
			<SUIDrawer
				PaperProps={{
					style: {
						borderRadius: "4px",
						boxShadow: "-6px 0px 10px -10px",
						border: "1px solid rgba(0, 0, 0, 0.12) !important",
						position: "absolute",
						top: '105px',
						bottom: '0px',
						width: '25em',
						height: 'inherit',
						overflow: 'auto'
					},
				}}
				anchor='right'
				className='settings-rightpanel-cls'
				variant='permanent'
				elevation={8}
				open={false}
			>
				<Box>
					<Stack direction="row" sx={{justifyContent: "end", height: "2em"}}>
						<IconButton className="Close-btn" aria-label="Close Right Pane"
							onClick={() => dispatch(setShowSettingsPanel(false))}
						>
							<span className="common-icon-Declined"></span>
						</IconButton>
					</Stack>
					{ !isChangeEventSC() && <Stack className='General-settings'>
						<Stack className='generalSettings-Sections'>
							{/* <Typography variant="h6" component="h6" className='budgetSetting-heading'>Settings</Typography>
							<List className='generalSettings-list'
								sx={{
									display: 'flex',
									justifyContent: 'center',
									alignItems: 'center',
									alignSelf: 'center',
									textWrap: 'nowrap'
								}}
							>
								{(window?.parent as any)?.GBL?.config?.currentProjectInfo?.blockchainEnabled && <ListItem className='generalSettings-listitem'>
									<ListItemText primary="Blockchain Two Factor Authentication" className='generalsettingtext' />
									<ListItemIcon key={`iqmenu-item-icon-common-icon-sketch`}>
										<span className="common-icon-Project-Info"></span>
									</ListItemIcon>
									<ListItemIcon>
										<IQToggle
											// checked={toggleChecked}
											switchLabels={['ON', 'OFF']}
											// onChange={(e) => {handleToggleChange(e);}}
											edge={'end'}
										/>
									</ListItemIcon>
								</ListItem>}
							</List> */}
							<Typography variant="h6" component="h6" className='budgetSetting-heading'>Work Flow Settings</Typography>	
							<SmartDropDown
								options={workFlowDropDowOptions || []}
								dropDownLabel="Change Order"
								isSearchField
								required={false}
								// useNestedOptions
								outSideOfGrid={true}
								selectedValue={selectedOption}
								isFullWidth
								ignoreSorting={true}
								sx={{
									'& .MuiInputBase-input': {
										padding: '8px 25px 6px 4px !important'
									}
								}}
								handleChange={(value: any) => handleInputChange(value)}
								variant={'outlined'}
								optionImage={true}
								isSubMenuSearchField={true}
								isDropdownSubMenu={true}
								defaultSubMenuSelection={defaultSelection}
								handleSearchProp={(items: any, key: any) => {}}
								subMenuModuleName={'change-events'}
								// menuProps={classes3.menuPaper}
							/>
						</Stack>
					</Stack>}
				</Box>
			</SUIDrawer>
			: null}
	</>;
});