import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchInventoryCategoryList } from './inventoryCategoryAPI';

export type ToolsAndEquipmentPageTypes = 'category' | 'inventory';

export interface ToolsAndEquipmentState {
	loadingCategory: boolean;
	inventoryCategories: any[];
}

const initialState: ToolsAndEquipmentState = {
	loadingCategory: false,
	inventoryCategories: []
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchCategories = createAsyncThunk(
	'inventory/Category',
	async () => {
		const categories = await fetchInventoryCategoryList();

		// The value we return becomes the `fulfilled` action payload
		return categories;
	}
);

export const inventoryCategorySlice = createSlice({
	name: 'inventoryCategory',
	initialState,
	// The `reducers` field lets us define reducers and generate associated actions
	reducers: {
		// 
	},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder
			.addCase(fetchCategories.pending, (state) => {
				state.loadingCategory = true;
			})
			.addCase(fetchCategories.fulfilled, (state, action) => {
				state.loadingCategory = false;
				state.inventoryCategories = action.payload;
			})
			.addCase(fetchCategories.rejected, (state, action) => {
				state.loadingCategory = false;
			});
	}
});

// export const { getAll } = subcategorySlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const getPageType = (state: RootState) => state.inventoryCategory;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default inventoryCategorySlice.reducer;
