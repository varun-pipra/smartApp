import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchStackedBarChartData } from "./chartAPI";

export type AnalyticalTabPageTypes = "stackedbarchart" | "chart";

export interface AnalyticalTabState {
  loadingStackedbarchart: boolean;
  stackedbarcharts: any[];
}

const initialState: AnalyticalTabState = {
  loadingStackedbarchart: false,
  stackedbarcharts: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchStackedbarcharts = createAsyncThunk(
  "stackedbarchart/Chart",
  async () => {
    const stackedbarcharts = await fetchStackedBarChartData();

    // The value we return becomes the `fulfilled` action payload
    return stackedbarcharts;
  }
);

export const stackedbarchartSlice = createSlice({
  name: "stackedBarChart",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    //
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchStackedbarcharts.pending, (state) => {
        state.loadingStackedbarchart = true;
      })
      .addCase(fetchStackedbarcharts.fulfilled, (state, action) => {
        state.loadingStackedbarchart = false;
        state.stackedbarcharts = action.payload;
      })
      .addCase(fetchStackedbarcharts.rejected, (state, action) => {
        state.loadingStackedbarchart = false;
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const getPageType = (state: RootState) => state.inventoryCategory;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default stackedbarchartSlice.reducer;
