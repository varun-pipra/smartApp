import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from 'app/store';
import { fetchInventoryList, fetchRTLSData } from './inventoryApi';

export interface InventoryState {
	tab: number;
	loading: boolean;
	tools: any[];
	analytics: any;
	rtlsData: any[];
	showAddInventoryPopup: boolean;
}

const initialState: InventoryState = {
	loading: false,
	tab: 0,
	tools: [],
	analytics: {},
	rtlsData: [],
	showAddInventoryPopup: false
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchInventory = createAsyncThunk(
	'inventory/getAll',
	async () => {
		const tools = await fetchInventoryList();
		// The value we return becomes the `fulfilled` action payload
		return tools;
	}
);

export const fetchInventoryRTLSData = createAsyncThunk(
	'inventoryRTLS/getAll',
	async () => {
		const rtlsData = await fetchRTLSData();
		// The value we return becomes the `fulfilled` action payload
		return rtlsData;
	}
);

export const inventorySlice = createSlice({
	name: 'inventory',
	initialState,
	// The `reducers` field lets us define reducers and generate associated actions
	reducers: {
		setInventoryTab: (state, action: PayloadAction<number>) => {
			// return { ...state, ...{ page: action.payload } };
			state.tab = action.payload;
		},
		setShowAddInventoryPopup: (state, action: PayloadAction<boolean>) =>{
			// return { ...state, ...{ page: action.payload } };
			state.showAddInventoryPopup = action.payload;
		},
		addInventory: (state) => {
			// Redux Toolkit allows us to write "mutating" logic in reducers. It
			// doesn't actually mutate the state because it uses the Immer library,
			// which detects changes to a "draft state" and produces a brand new
			// immutable state based off those changes
			// state.value += 1;
		},
		updateInventory: (state) => {
			// state.value -= 1;
		},
		// Use the PayloadAction type to declare the contents of `action.payload`
		deleteInventory: (state, action: PayloadAction<any>) => {
			// state.value += action.payload;
		},
	},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder
			.addCase(fetchInventory.pending, (state) => {
				state.loading = true;
			})
			.addCase(fetchInventory.fulfilled, (state, action) => {
				state.loading = false;
				state.tools = action.payload;
			})
			.addCase(fetchInventory.rejected, (state) => {
				state.loading = false;
			})
			.addCase(fetchInventoryRTLSData.pending, (state) => {
				state.loading = true;
			})
			.addCase(fetchInventoryRTLSData.fulfilled, (state, action) => {
				state.loading = false;
				state.rtlsData = action.payload;
			})
			.addCase(fetchInventoryRTLSData.rejected, (state) => {
				state.loading = false;
			});
	}
});

export const { setInventoryTab, addInventory, updateInventory, deleteInventory, setShowAddInventoryPopup } = inventorySlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const getInventoryTab = (state: RootState) => state.inventory.tab;

export const showAddInventoryPopup = (state: RootState) => state.inventory.showAddInventoryPopup;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
// 	(amount: number): AppThunk =>
// 		(dispatch, getState) => {
// 			const currentValue = selectCount(getState());
// 			if (currentValue % 2 === 1) {
// 				dispatch(incrementByAmount(amount));
// 			}
// 		};

export default inventorySlice.reducer;
