import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "app/store";
import { fetchVendorDataList } from "./vendorInfoAPI";

export interface BudgetManagerVendordDataState {
  loading: boolean;
  vendorData: any;
  trades: any;
}

const initialState: BudgetManagerVendordDataState = {
  loading: false,
  vendorData: [],
  trades: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchVendorData = createAsyncThunk<any, any>(
  "vendorData",
  async (appInfo) => {
    const response = await fetchVendorDataList(appInfo);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const gridDataSlice = createSlice({
  name: "vendorData",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setTrades: (state, action: PayloadAction<any>) => {
      let data = action.payload;
      let TradesData: any[] = [];
      let filteredTradeData: any[] = [];
      data.map((vendors: any) => {
        if (vendors.trade && vendors.trade.length > 0) {
          TradesData.push(vendors.trade);
        }
      });
      if (TradesData && TradesData.length > 0) {
        TradesData.map((item) => {
          if (Array.isArray(item)) {
            item.map((trade) => {
              filteredTradeData.push(trade);
            });
          }
        });

        filteredTradeData = filteredTradeData.filter(
          (value: any, index: number, self) =>
            index === self.findIndex((t: any) => t.objectId === value.objectId)
        );
      }
      filteredTradeData = filteredTradeData.sort(
        (a: { name: string }, b: { name: string }) =>
          a.name.localeCompare(b.name)
      );
      state.trades = filteredTradeData;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchVendorData.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchVendorData.fulfilled, (state, action) => {
        state.loading = false;
        let filteredList = action.payload;
        filteredList = filteredList.sort(
          (a: { name: string }, b: { name: string }) =>
            a.name.localeCompare(b.name)
        );
        state.vendorData = filteredList;
      })
      .addCase(fetchVendorData.rejected, (state) => {
        state.loading = false;
      });
  },
});

// export const { setSelectedRows } = gridDataSlice.actions;
export const { setTrades } = gridDataSlice.actions;
export const getTradesData = (state: RootState) => state.vendorData.trades;

export default gridDataSlice.reducer;
