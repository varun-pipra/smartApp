import {IconButton, Button} from '@mui/material';

// Project files and internal support import
import IQTooltip from 'components/iqtooltip/IQTooltip';
import {getVendorPayAppsLst, setRefreshed} from 'features/vendorpayapplications/stores/gridSlice';
import {getServer} from 'app/common/appInfoSlice';
import {useAppDispatch, useAppSelector} from 'app/hooks';
import React from 'react';
import {deletePayApp} from 'features/vendorpayapplications/stores/gridApi';
import SUIAlert from 'sui-components/Alert/Alert';
import {isUserGCForVPA} from 'features/vendorpayapplications/utils';
import PaymentDetailsForm from '../paymentdetailsform/PaymentDetailsForm';
import {getPayAppDetails, setSelectedRecord} from 'features/vendorpayapplications/stores/VendorPayAppSlice';
import {paymentReceived, paymentSent} from 'features/vendorpayapplications/stores/ButtonAPI';
import PaymentReceivedForm from '../paymentreceivedForm/PaymentReceivedForm';
import {getAttachments as getSentAttachments} from 'features/vendorpayapplications/stores/payment/PayAppPaymentSentSlice';
import {getAttachments as getReceivedAttachments} from 'features/vendorpayapplications/stores/payment/PayAppPaymentReceivedSlice';
import {setToastMessage} from 'features/vendorpayapplications/stores/VendorPayAppSlice';
import { fetchCompanyList } from 'features/vendorcontracts/stores/VendorContractsSlice';

// Component definition
const VendorPayAppToolbarLeftButtons = () => {
	const dispatch = useAppDispatch();
	const appInfo = useAppSelector(getServer);
	const {selectedRows} = useAppSelector((state) => state.VPAGrid);
	const sentAttachments = useAppSelector(getSentAttachments);
	const receivedAttachments = useAppSelector(getReceivedAttachments);

	const [ disableDelete, setDisableDelete ] = React.useState<boolean>(true);
	const [ disablePrint, setDisablePrint ] = React.useState<boolean>(true);	
	const [ disablePaymentSent, setDisablePaymentSent ] = React.useState<boolean>(true);
	const [ disablePaymentReceive, setDisablePaymentReceive ] = React.useState<boolean>(true);
	const [ paymentSentClick, setPaymentSentClick ] = React.useState<boolean>(false);
	const [ paymentReceiveClick, setPaymentReceiveClick ] = React.useState<boolean>(false);
	const [ paymentSentData, setPaymentSentData ] = React.useState<any>({});
	const [ warningMessage, setWarningMessage ] = React.useState<boolean>(false);
	const [ alert, setAlert ] = React.useState<boolean>(false);

	React.useEffect(() => {
		selectedRows.length > 0 ? setDisableDelete(false) : setDisableDelete(true);
		selectedRows.length > 0 ? setDisablePrint(false) : setDisablePrint(true);		
		selectedRows.length > 0 && selectedRows[ 0 ]?.status == 'PaymentAuthorized' ? setDisablePaymentSent(false) : setDisablePaymentSent(true);
		selectedRows.length > 0 && selectedRows[ 0 ]?.status == 'PaymentSent' ? setDisablePaymentReceive(false) : setDisablePaymentReceive(true);
	}, [ selectedRows ]);

	const handleListChanges = (val: string) => {
		if(val == 'yes') {
			const selectedRowIds = selectedRows?.map((row: any) => row.id);
			// console.log('selectedRows', selectedRows);

			deletePayApp(appInfo, selectedRowIds[ 0 ], (response: any) => {
				dispatch(getVendorPayAppsLst(appInfo));
				dispatch(setToastMessage('Selected Record Deleted Successfully'));
			});
			setDisableDelete(true);
		}
		setAlert(false);
	};

	const handlePaymentSent = (data: any) => {
		//console.log('handlePaymentSent data', data, selectedRows)
		const payload = {
			'notes': data?.notes ? data?.notes : '',
			'sentOn': new Date(data?.sentOn)?.toISOString(),
			'amount': data?.amount ? Number(data?.amount) : 0,
			'invoiceNumber': data?.invoiceNumber,
			'modeOfPayment': data?.modeOfPayment[ 0 ],
			'attachments': sentAttachments
		};

		paymentSent(appInfo, payload, selectedRows[ 0 ]?.id, (response: any) => {
			dispatch(setSelectedRecord(response));
			dispatch(getVendorPayAppsLst(appInfo));
			setDisablePaymentSent(true);
			setPaymentSentClick(false);
			dispatch(setToastMessage('Updated Payment Status Successfully'));
		});
	};

	const handlePaymentRecive = (data: any) => {
		console.log("data in receive", data);
		const payload = {
			'notes': data?.notes ? data?.notes : '',
			'receivedOn': new Date(data?.receivedOn)?.toISOString(),
			'amount': data?.amount ? Number(data?.amount) : 0,
			'attachments': receivedAttachments
		};

		paymentReceived(appInfo, payload, selectedRows[ 0 ]?.id, (response: any) => {
			dispatch(setSelectedRecord(response));
			dispatch(getVendorPayAppsLst(appInfo));
			setDisablePaymentReceive(true);
			setPaymentReceiveClick(false);
			dispatch(setToastMessage('Updated Payment Status Successfully'));
		});
	};
	const deleteMethod = () => {

		const userType = isUserGCForVPA(appInfo);
		const otherStatus = [ 'AutoGeneratedWaitingForBothParties', 'Rejected', 'AwaitingAcceptance', 'SubmittedWaitingForOtherParty', 'PaymentAuthorized' ].includes(selectedRows[ 0 ]?.status);
		const sentReceivedStatus = [ 'PaymentSent', 'PaymentReceived' ].includes(selectedRows[ 0 ]?.status);

		if(userType == true && sentReceivedStatus == true) {///Vendor Pay Manager
			setAlert(true);
			setWarningMessage(true);
		}
		else if(userType == false && (sentReceivedStatus == true || otherStatus == true)) {///Sub Contract Pay Manager
			setAlert(true);
			setWarningMessage(true);
		}
		else {
			setAlert(true);
			setWarningMessage(false);
		}
	};

	// const getData = React.useMemo(() => {
	// 	console.log("getData")
	// 	let data = {...obj}
	// 	paymentReceiveClick && dispatch(getPayAppDetails({ appInfo: appInfo, id: obj?.id })).then((resp:any) => {
	// 		data = resp
	// 	},);
	// 	return data;
	// }, []);

	return <>
		<IQTooltip title='Refresh' placement='bottom'>
			<IconButton
				aria-label='Refresh Vendor Pay Apps List'
				onClick={() => {
					dispatch(getVendorPayAppsLst(appInfo));
					dispatch(setRefreshed(true));
					isUserGCForVPA(appInfo) && dispatch(fetchCompanyList(appInfo));
				}}
			>
				<span className="common-icon-refresh"></span>
			</IconButton>
		</IQTooltip>
		{/* <IQTooltip title='Export CSV' placement='bottom'>
			<IconButton>
				<span className='common-icon-Export'/>
			</IconButton>
		</IQTooltip> */}
		<IQTooltip title='Print' placement='bottom'>
			<IconButton disabled={disablePrint} >
				<span className='common-icon-print' />
			</IconButton>
		</IQTooltip>
		<IQTooltip title='Delete' placement='bottom'>
			<IconButton aria-label='Delete Bid response Line Item'
				disabled={disableDelete}
				onClick={() => deleteMethod()}
			>
				<span className='common-icon-delete'></span>
			</IconButton>
		</IQTooltip>

		{isUserGCForVPA(appInfo) && <IconButton className='text-btn-cls' aria-label='Mark Payment Sent' disabled={disablePaymentSent} onClick={() => {setPaymentSentClick(true);}}>
			<span className='common-icon-tickmark'></span>
			Mark Payment Sent
		</IconButton>}

		{!isUserGCForVPA(appInfo) && <IconButton className='text-btn-cls' disabled={disablePaymentReceive} aria-label='Mark Payment Received' onClick={() => {
			setPaymentReceiveClick(true);
			dispatch(getPayAppDetails({appInfo: appInfo, id: selectedRows[ 0 ]?.id})).then((resp: any) => {console.log("resp", resp); setPaymentSentData(resp?.payload);});
		}}>
			<span className='common-icon-tickmark'></span>
			Mark Payment Received
		</IconButton>}
		<SUIAlert
			open={alert}
			contentText={
				warningMessage ?
					<div>
						<span>{'This Pay app item cant be deleted.'}</span>
						<div style={{textAlign: 'right', marginTop: '10px'}}>
							<Button
								className="cancel-cls"
								style={{
									backgroundColor: '#666',
									color: '#fff',
									padding: '12px',
									height: '37px',
									borderRadius: '2px',
									marginRight: '0px',
									boxShadow: '0px 3px 1px -2px rgb(0 0 0 / 20%), 0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%)',
									display: 'initial'
								}}
								onClick={(e: any) => {setAlert(false);}}>OK</Button>
						</div>
					</div>
					:
					<div><span>Are you sure you want to delete the selected Pay App(s)?</span>
						<br /><br />
						<span>This action cannot be reverted.</span>
					</div>
			}
			title={warningMessage ? 'Warning' : 'Confirmation'}
			onAction={(e: any, type: string) => handleListChanges(type)}
			showActions={warningMessage ? false : true}
		/>
		{
			paymentSentClick && <PaymentDetailsForm iframeId='vendorPayAppIframe' appType='VendorPayApp' data={selectedRows[ 0 ]} onClose={() => {setPaymentSentClick(false);}} onAdd={(formData: any) => {handlePaymentSent(formData);}} />
		}
		{
			paymentReceiveClick && <PaymentReceivedForm iframeId='vendorPayAppIframe' appType='VendorPayApp' data={paymentSentData} onClose={() => {setPaymentReceiveClick(false); setPaymentSentData({});}} onAdd={(formData: any) => {handlePaymentRecive(formData);}} />
		}
	</>;
};

export default VendorPayAppToolbarLeftButtons;